{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fnil\fcharset134 SimSun;\f2\fnil\fcharset0 LucidaGrande;
}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14000\viewh15620\viewkind0
\deftab720
\pard\pardeftab720\ri720\qj

\f0\fs28 \cf0 \
2. 
\f1 \'d2\'aa\'c7\'f3\'b4\'d3
\f0 N
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'d6\'d0\'cb\'e6\'bb\'fa\'b5\'c4\'b3\'e9\'c8\'a1
\f0 K
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'a1\'a3
\f0 \
int remain = N\
int select = K\
for (int i = 0; i < N; ++i)\{\
   if (rand()% remain < select)\{\
      cout<<i<<" ";\
      --select;\
   \}\
   --remain;\
\}\

\f1 \'b5\'da\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'b1\'bb\'d1\'a1\'d6\'d0\'b5\'c4\'b8\'c5\'c2\'ca\'ce\'aa
\f0  K/N\

\f1 \'b5\'da\'b6\'fe\'b8\'f6\'d4\'aa\'cb\'d8\'b1\'bb\'d1\'a1\'d6\'d0\'b5\'c4\'b8\'c5\'c2\'ca\'ce\'aa
\f0 (K/N)*((K-1)/(N-1)) + ((N-K)/N) * (K/(N-1)) = K/N\
\
.........\
\
\
\
\
3. 
\f1 \'d2\'aa\'c7\'f3\'b4\'d3
\f0 N
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'d6\'d0\'cb\'e6\'bb\'fa\'b5\'c4\'b3\'e9\'c8\'a1
\f0 1
\f1 \'b8\'f6\'d4\'aa\'cb\'d8
\f0 , 
\f1 \'c6\'e4\'d6\'d0
\f0 N
\f1 \'ce\'de\'b7\'a8\'c8\'b7\'b6\'a8
\f0 (
\f1 \'ca\'fd\'be\'dd\'c1\'f7
\f0 )
\f1 \'a1\'a3
\f0 \
int Num;\
int i = 0;\
int choose = 0;\
while(scanf("%d", &Num)&& Num != 0)\{\
   if (((double)rand()/(double)RANDOM_MAX) < (1.0 / (double)++i))\
      choose = Num;\
\}\
cout << choose <<endl;\
\

\f1 \'d7\'dc\'ca\'c7\'d1\'a1\'d4\'f1\'b5\'da\'d2\'bb\'d0\'d0\'a3\'ac
\f0  
\f1 \'b6\'fe\'b7\'d6\'d6\'ae\'d2\'bb\'bc\'b8\'c2\'ca\'d1\'a1\'d4\'f1\'b5\'da\'b6\'fe\'d0\'d0\'a3\'ac
\f0  
\f1 \'d2\'d4\'b4\'cb\'c0\'e0\'cd\'c6\'a3\'ac
\f0  K
\f1 \'b7\'d6\'d6\'ae\'d2\'bb\'bb\'fa\'c2\'ca\'d1\'a1\'d4\'f1\'b5\'da
\f0 K
\f1 \'d0\'d0\'a3\'ac
\f0  \

\f1 \'b5\'b1
\f0 while 
\f1 \'d6\'b4\'d0\'d0\'cd\'ea\'b1\'cf\'a3\'ac\'bc\'d9\'c9\'e8
\f0 N
\f1 \'b8\'f6\'ca\'fd\'d7\'d6\'a3\'ac\'d4\'f2\'c3\'bf\'b8\'f6\'ca\'fd\'d7\'d6\'b1\'bb\'d1\'a1\'d4\'f1\'b5\'c4\'bb\'fa\'c2\'ca\'be\'f9\'ce\'aa
\f0 1/N\
\

\f1 \'b5\'da\'d2\'bb\'d0\'d0\'b1\'bb\'d1\'a1\'d4\'f1\'b5\'c4\'bb\'fa\'c2\'ca\'ce\'aa
\f0 :\
\
1 * 1/2 * 2/3 * 3/4 *.... (N-1)/N = 1/N\
\

\f1 \'b5\'da
\f0 K
\f1 \'d0\'d0\'b1\'bb\'d1\'a1\'d4\'f1\'b5\'c4\'bb\'fa\'c2\'ca\'ce\'aa\'a3\'ba
\f0 \
\
1/K * K/(K+1) * .... (N-1)/N = 1/N\
\
\
4. 
\f1 \'d2\'aa\'c7\'f3\'b4\'d3
\f0 N
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'d6\'d0\'cb\'e6\'bb\'fa\'b5\'c4\'b3\'e9\'c8\'a1
\f0 K
\f1 \'b8\'f6\'d4\'aa\'cb\'d8
\f0 , 
\f1 \'c6\'e4\'d6\'d0
\f0 N
\f1 \'ce\'de\'b7\'a8\'c8\'b7\'b6\'a8
\f0 (
\f1 \'ca\'fd\'be\'dd\'c1\'f7
\f0 )
\f1 \'a1\'a3
\f0 \
reservoir sampling\
//Init : a reservoir with the size
\f1 \'a3\'ba
\f0  K\
for(int i = K; i < N; ++i)\{\
   int M = rand() % (i+1);\
   if( M < K)\
      SWAP the Mth value and ith value\
\}\
\
\pard\pardeftab720\ri720\sb100\sa100

\f1\fs24 \cf0 \'d5\'e2\'cc\'e2\'b5\'c4\'d2\'e2\'cb\'bc\'d3\'a6\'b8\'c3\'ca\'c7\'d7\'dc\'d0\'d0\'ca\'fdn\'ce\'b4\'d6\'aa\'a3\'ac\'c8\'e7\'b9\'fb\'b1\'e9\'c0\'fa\'d2\'bb\'b1\'e9\'cf\'c8\'b5\'c3n\'a3\'ac\'bf\'aa\'cf\'fa\'d2\'b2\'bb\'e1\'b7\'c7\'b3\'a3\'b4\'f3\'a1\'a3
\f0 \'a0
\f2 \uc0\u8232 
\f1 \'bf\'c9\'d2\'d4\'d5\'e2\'c3\'b4\'c5\'aa\'a3\'ac\'d6\'bb\'d0\'e8\'b1\'e9\'c0\'fa\'d2\'bb\'b1\'e9\'a3\'ac\'b2\'bb\'d0\'e8\'d6\'aa\'b5\'c0\'d7\'dc\'d0\'d0\'ca\'fd\'a1\'a3
\f0 \'a0
\f2 \uc0\u8232 
\f1 \'d3\'c3\'d2\'bb\'b8\'f6\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9R\'bc\'c7\'c2\'bc\'cf\'d6\'d4\'da\'d2\'d1\'d1\'a1\'d4\'f1\'b5\'c4\'d0\'d0\'ba\'c5\'a1\'a3\'b3\'f5\'ca\'bc\'ce\'aa\'c7\'b0m\'d0\'d0\'b6\'bc\'d1\'a1\'c1\'cb\'a1\'a3
\f0 \'a0
\f2 \uc0\u8232 
\f1 \'c8\'bb\'ba\'f3\'b6\'d4\'b5\'dax\'d0\'d0\'a3\'a8x > m\'a3\'a9\'a3\'ac\'d2\'d4m/x\'b5\'c4\'b8\'c5\'c2\'ca\'d1\'a1\'d6\'d0\'d5\'e2\'d2\'bb\'d0\'d0\'a3\'ac\'c8\'bb\'ba\'f3\'d3\'c3x\'cb\'e6\'bb\'fa\'cc\'e6\'bb\'bb\'b5\'f4\'b5\'b1\'c7\'b0R\'d6\'d0\'b5\'c4\'c4\'b3\'d2\'bb\'b8\'f6\'d6\'b5\'a3\'acie\'a3\'ac\'c3\'bf\'d2\'bb\'d0\'d0\'b6\'bc\'d3\'d01/m\'b5\'c4\'b8\'c5\'c2\'ca\'b1\'bb\'cc\'e6\'bb\'bb\'a1\'a3
\f0 \'a0
\f2 \uc0\u8232 
\f1 \'d5\'e2\'d1\'f9\'b1\'e9\'c0\'fa\'b5\'bd\'ce\'c4\'bc\'fe\'c4\'a9\'ce\'b2\'a3\'ac\'d7\'ee\'ba\'f3R\'d6\'d0\'b5\'c4m\'b8\'f6\'be\'cd\'ca\'c7\'cb\'e6\'bb\'fa\'d1\'a1\'d4\'f1\'b3\'f6\'b5\'c4m\'b8\'f6\'a1\'a3
\f0 \'a0
\fs22 \
\pard\pardeftab720\ri720\qj

\fs28 \cf0 \
\
\

\f1 \'bd\'e2\'be\'f6\'b7\'bd\'b0\'b8\'be\'cd\'ca\'c7\'d0\'ee\'cb\'ae\'bf\'e2\'b3\'e9\'d1\'f9\'a3\'a8
\f0 reservoid sampling
\f1 \'a3\'a9\'a1\'a3\'d6\'f7\'d2\'aa\'cb\'bc\'cf\'eb\'be\'cd\'ca\'c7\'b1\'a3\'b3\'d6\'d2\'bb\'b8\'f6\'bc\'af\'ba\'cf\'a3\'a8\'d5\'e2\'b8\'f6\'bc\'af\'ba\'cf\'d6\'d0\'b5\'c4\'c3\'bf\'b8\'f6\'ca\'fd\'d7\'d6\'b3\'f6\'cf\'d6\'a3\'a9\'a3\'ac\'d7\'f7\'ce\'aa\'d0\'ee\'cb\'ae\'b3\'d8\'a3\'ac\'d2\'c0\'b4\'ce\'b1\'e9\'c0\'fa\'cb\'f9\'d3\'d0\'ca\'fd\'be\'dd\'b5\'c4\'ca\'b1\'ba\'f2\'d2\'d4\'d2\'bb\'b6\'a8\'b8\'c5\'c2\'ca\'cc\'e6\'bb\'bb\'d5\'e2\'b8\'f6
\f0 \
\

\f1 \'d0\'ee\'cb\'ae\'b3\'d8\'d6\'d0\'b5\'c4\'ca\'fd\'d7\'d6\'a1\'a3
\f0 \

\f1 \'a3\'a8
\f0 1
\f1 \'a3\'a9\'b3\'f5\'ca\'bc\'c7\'e9\'bf\'f6\'a1\'a3\'b3\'f6\'cf\'d6\'d4\'da\'cb\'ae\'bf\'e2\'d6\'d0\'b5\'c4
\f0 k
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'b5\'c4\'b3\'f6\'cf\'d6\'b8\'c5\'c2\'ca\'b6\'bc\'ca\'c7\'d2\'bb\'d6\'c2\'b5\'c4\'a3\'ac\'b6\'bc\'ca\'c7
\f0 1
\f1 \'a1\'a3\'d5\'e2\'b8\'f6\'ba\'dc\'cf\'d4\'c8\'bb\'a1\'a3
\f0 \

\f1 \'a3\'a8
\f0 2
\f1 \'a3\'a9\'b5\'da\'d2\'bb\'b2\'bd\'a1\'a3\'b5\'da\'d2\'bb\'b2\'bd\'be\'cd\'ca\'c7\'d6\'b8\'a3\'ac\'b4\'a6\'c0\'ed\'b5\'da
\f0 k+1
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'b5\'c4\'c7\'e9\'bf\'f6\'a1\'a3\'b7\'d6\'c1\'bd\'d6\'d6\'c7\'e9\'bf\'f6\'a3\'ba\'d4\'aa\'cb\'d8\'c8\'ab\'b2\'bf\'b6\'bc\'c3\'bb\'d3\'d0\'b1\'bb\'cc\'e6\'bb\'bb\'a3\'bb\'c6\'e4\'d6\'d0\'c4\'b3\'b8\'f6\'d4\'aa\'cb\'d8\'b1\'bb\'b5\'da
\f0 k+1
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'cc\'e6\'bb\'bb\'b5\'f4\'a1\'a3
\f0 \
\

\f1 \'ce\'d2\'c3\'c7\'cf\'c8\'bf\'b4\'c7\'e9\'bf\'f6
\f0 2
\f1 \'a3\'ba\'b5\'da
\f0 k+1
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'b1\'bb\'d1\'a1\'d6\'d0\'b5\'c4\'b8\'c5\'c2\'ca\'ca\'c7
\f0 k/(k+1)
\f1 \'a3\'a8\'b8\'f9\'be\'dd\'b9\'ab\'ca\'bd
\f0 k/i
\f1 \'a3\'a9\'a3\'ac\'cb\'f9\'d2\'d4\'d5\'e2\'b8\'f6\'d0\'c2\'d4\'aa\'cb\'d8\'d4\'da\'cb\'ae\'bf\'e2\'d6\'d0\'b3\'f6\'cf\'d6\'b5\'c4\'b8\'c5\'c2\'ca\'be\'cd\'d2\'bb\'b6\'a8\'ca\'c7
\f0 k/(k+1)
\f1 \'a3\'a8\'b2\'bb\'b9\'dc\'cb\'fc\'cc\'e6\'bb\'bb\'b5\'f4\'c4\'c4\'b8\'f6\'d4\'aa\'cb\'d8\'a3\'ac\'b7\'b4\'d5\'fd\'bf\'cf\'b6\'a8\'cb\'fc\'ca\'c7\'d2\'d4\'d5\'e2\'b8\'f6\'b8\'c5\'c2\'ca\'b3\'f6\'cf\'d6\'d4\'da\'cb\'ae\'bf\'e2\'d6\'d0\'a3\'a9\'a1\'a3\'cf\'c2\'c3\'e6\'c0\'b4\'bf\'b4\'cb\'ae\'bf\'e2\'d6\'d0\'ca\'a3\'d3\'e0\'b5\'c4\'d4\'aa\'cb\'d8\'b3\'f6\'cf\'d6\'b5\'c4\'b8\'c5\'c2\'ca\'a3\'ac\'d2\'b2\'be\'cd\'ca\'c7
\f0 1-P(
\f1 \'d5\'e2\'b8\'f6\'d4\'aa\'cb\'d8\'b1\'bb\'cc\'e6\'bb\'bb\'b5\'f4\'b5\'c4\'b8\'c5\'c2\'ca
\f0 )
\f1 \'a1\'a3\'cb\'ae\'bf\'e2\'d6\'d0\'c8\'ce\'d2\'e2\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'b1\'bb\'cc\'e6\'bb\'bb\'b5\'f4\'b5\'c4\'b8\'c5\'c2\'ca\'ca\'c7\'a3\'ba
\f0 (k/k+1)*(1/k)=1/(k+1)
\f1 \'a3\'ac\'d2\'e2\'bc\'b4\'ca\'d7\'cf\'c8\'d2\'aa\'b5\'da
\f0 k+1
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'b1\'bb\'d1\'a1\'d6\'d0\'a3\'ac\'c8\'bb\'ba\'f3\'d7\'d4\'bc\'ba\'d4\'da\'bc\'af\'ba\'cf\'b5\'c4
\f0 k
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'d6\'d0\'b1\'bb\'d1\'a1\'d6\'d0\'a1\'a3\'c4\'c7\'cb\'fc\'b3\'f6\'cf\'d6\'b5\'c4\'b8\'c5\'c2\'ca\'be\'cd\'ca\'c7
\f0 1-1/(k+1)=k/(k+1)
\f1 \'a1\'a3\'bf\'c9\'d2\'d4\'bf\'b4\'b3\'f6\'c0\'b4\'a3\'ac\'be\'c9\'d4\'aa\'cb\'d8\'ba\'cd\'d0\'c2\'d4\'aa\'cb\'d8\'b3\'f6\'cf\'d6\'b5\'c4\'b8\'c5\'c2\'ca\'ca\'c7\'cf\'e0\'b5\'c8\'b5\'c4\'a1\'a3
\f0 \
\

\f1 \'c7\'e9\'bf\'f6
\f0 1
\f1 \'a3\'ba\'b5\'b1\'d4\'aa\'cb\'d8\'c8\'ab\'b2\'bf\'b6\'bc\'c3\'bb\'d3\'d0\'cc\'e6\'bb\'bb\'b5\'f4\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'c3\'bf\'b8\'f6\'d4\'aa\'cb\'d8\'b5\'c4\'b3\'f6\'cf\'d6\'b8\'c5\'c2\'ca\'bf\'cf\'b6\'a8\'ca\'c7\'d2\'bb\'d1\'f9\'b5\'c4\'a3\'ac\'d5\'e2\'ba\'dc\'cf\'d4\'c8\'bb\'a1\'a3\'b5\'ab\'be\'df\'cc\'e5\'ca\'c7\'b6\'e0\'c9\'d9\'c4\'d8\'a3\'bf\'be\'cd\'ca\'c7
\f0 1-P(
\f1 \'b5\'da
\f0 k+1
\f1 \'b8\'f6\'d4\'aa\'cb\'d8\'b1\'bb\'d1\'a1\'d6\'d0
\f0 )=1-k/(k+1)=1/(k+1)
\f1 \'a1\'a3
\f0 \
\
\
\
\
\

\f1 \'a3\'a8
\f0 3
\f1 \'a3\'a9\'b9\'e9\'c4\'c9\'b7\'a8\'a3\'ba\'d6\'d8\'b8\'b4\'c9\'cf\'c3\'e6\'b5\'c4\'b9\'fd\'b3\'cc\'a3\'ac\'d6\'bb\'d2\'aa\'d6\'a4\'c3\'f7\'b5\'da
\f0 i
\f1 \'b2\'bd\'b5\'bd\'b5\'da
\f0 i+1
\f1 \'b2\'bd\'a3\'ac\'cb\'f9\'d3\'d0\'d4\'aa\'cb\'d8\'b3\'f6\'cf\'d6\'b5\'c4\'b8\'c5\'c2\'ca\'ca\'c7\'cf\'e0\'b5\'c8\'b5\'c4\'bc\'b4\'bf\'c9\'a1\'a3\'b2\'ce\'bc\'fb\'a3\'ba
\f0 http://wansishuang.javaeye.com/blog/443902\
\
5. Shuffle (Fisher
\f1 \'a8\'43
\f0 Yates shuffle)\
\
void shuffle(int cards[], int n)\{\
    while (n > 1)\{\
        // Swap a random unshuffled card with the top-most card\
        int k = rand() % n--;\
        swap(cards[n], cards[k]);\
    \}\
\}\
}